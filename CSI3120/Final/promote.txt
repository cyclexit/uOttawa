1, 1, 2, 3, 5, 8, 13, 21
      ^        ^      ^
     1+1       |      |
              3+5     |
                     8+13

let rec fib n =
  if n <= 2 then
    1
  else
    fib (n-1) + fib (n-2)

let _ = fib 1 (* - : int = 1 *)
let _ = fib 2 (* - : int = 1 *)
let _ = fib 3 (* - : int = 2 *)
let _ = fib 5 (* - : int = 5 *)
let _ = fib 7 (* - : int = 13 *)

type 'a delay =
  | EV of 'a
  | UN of (unit -> 'a)

let ev (d:'a delay) =
  match d with
  | EV x -> x
  | UN f -> f()

let force (d:'a delay ref) =
  let v = ev !d in
  (d := EV v; v)